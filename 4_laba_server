// 4 laba server

#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <string>
#include <thread> // For threads
#include <mutex> // For mutexes
#pragma comment (lib, "Ws2_32.lib")

using namespace std;

//// Структура данных для передачи
struct MyData {
    char username[256];
    char message[256];
};

//// Глобальные переменные и мьютекс для синхронизации
int clientCount = 0;
mutex clientCountMutex; // Мьютекс для защиты clientCount

//// Функция для обработки клиента в отдельном потоке
void HandleClient(SOCKET clientSocket) {
    MyData receivedData;
    int bytesReceived;

    // Получение данных от клиента
    bytesReceived = recv(clientSocket, (char*)&receivedData, sizeof(MyData), 0);
    if (bytesReceived == SOCKET_ERROR) {
        cerr << "recv failed with error: " << WSAGetLastError() << endl;
        closesocket(clientSocket);
        return;
    }

    // Вывод полученных данных (с защитой мьютексом)
    {
        lock_guard<mutex> lock(clientCountMutex); // Автоматическая блокировка и разблокировка
        cout << "Received from client " << clientCount << ":" << endl;
        cout << "  USERNAME: " << receivedData.username << endl;
        cout << "  Message: " << receivedData.message << endl;
    }


    // Отправка данных обратно клиенту (эхо)
    send(clientSocket, (char*)&receivedData, sizeof(MyData), 0);

    // Закрытие сокета
    closesocket(clientSocket);
    {
        lock_guard<mutex> lock(clientCountMutex);
        clientCount--;
        cout << "Client disconnected.  Number of connected clients: " << clientCount << endl;
    }

}

int main() {
    WSADATA wsaData;
    SOCKET listenSocket, clientSocket;
    sockaddr_in serverAddr, clientAddr;
    int clientAddrSize = sizeof(clientAddr);

    // Инициализация Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cerr << "WSAStartup failed" << endl;
        return 1;
    }

    // Создание сокета
    listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (listenSocket == INVALID_SOCKET) {
        cerr << "socket failed with error: " << WSAGetLastError() << endl;
        WSACleanup();
        return 1;
    }

    // Настройка адреса сервера
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY; // Слушаем на всех доступных интерфейсах
    serverAddr.sin_port = htons(666);       // Порт сервера

    // Привязка сокета к адресу
    if (bind(listenSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        cerr << "bind failed with error: " << WSAGetLastError() << endl;
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    // Ожидание входящих соединений
    if (listen(listenSocket, SOMAXCONN) == SOCKET_ERROR) {
        cerr << "listen failed with error: " << WSAGetLastError() << endl;
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    cout << "Server listening on port 666..." << endl;

    // Основной цикл обработки подключений
    while (true) {
        // Принятие входящего соединения
        clientSocket = accept(listenSocket, (sockaddr*)&clientAddr, &clientAddrSize);
        if (clientSocket == INVALID_SOCKET) {
            cerr << "accept failed with error: " << WSAGetLastError() << endl;
            closesocket(listenSocket);
            WSACleanup();
            return 1;
        }

        {
            lock_guard<mutex> lock(clientCountMutex);
            clientCount++;
            cout << "Client connected. Number of connected clients: " << clientCount << endl;
        }


        // Создание нового потока для обработки клиента
        thread clientThread(HandleClient, clientSocket);
        clientThread.detach(); // Отсоединяем поток, чтобы он работал независимо
    }

    // Завершение работы Winsock
    closesocket(listenSocket);
    WSACleanup();

    return 0;
}
